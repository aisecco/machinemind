import numpy as np
import matplotlib.pyplot as plt


# input:输入的数据，input_channel:输入数据的通道数，out_channel:输出的特征图的通道数,kernel_size:卷积核的大小，stride:步长
def convolution(input, input_channel, out_channel, kernel_size, stride):
    kernel = np.random.randn(out_channel, input_channel, kernel_size, kernel_size)  # 创建卷积核
    padding = int((kernel_size - 1) / 2)  # 计算填充的大小
    padding_input = []
    # 进行对输入矩阵的填充
    for i in range(input_channel):
        padding_input.append(
            np.pad(input[i], ((padding, padding), (padding, padding)), 'constant', constant_values=(0, 0)))
    padding_input = np.array(padding_input)
    # 根据填充后的输入尺寸，卷积核大小，步长，计算输出矩阵的大小
    out_size = int((len(input[0]) + 2 * padding - kernel_size) / stride + 1)
    # 创建一个0填充的输出矩阵
    out = np.zeros((out_channel, out_size, out_size))

    for i in range(out_channel):
        out_x = 0
        out_y = 0
        x_end = padding_input.shape[1] - padding - 1  # 卷积边界

        x = padding
        y = padding
        while x <= x_end:
            if y > padding_input.shape[1] - padding - 1:  # 卷积核超出右侧边界时，向下移动一个步长
                y = padding
                x = x + stride
                out_y = 0
                out_x = out_x + 1
                if x > x_end:
                    break
            # 卷积操作
            out[i][out_x][out_y] = np.sum(
                padding_input[:, x - padding:x + padding + 1, y - padding:y + padding + 1] * kernel[i])

            y = y + stride
            out_y += 1

    return out


def ReLu(input):
    out = np.maximum(0, input)
    return out


# input:输入的数据，pooling_size:卷积核大小，stride:步长
def pooling(input, pooling_size, stride):
    out_size = int((len(input[0]) - pooling_size) / stride + 1)  # 计算池化后的输出矩阵的大小
    out = np.zeros((len(input[0]), out_size, out_size))  # 初始化输出矩阵
    # 对每个通道开始池化
    for i in range(input.shape[0]):
        out_x = 0
        out_y = 0
        in_x = 0
        in_y = 0
        # 开始滑动
        while True:
            if out_y >= out_size:
                in_y = 0
                in_x += pooling_size
                out_x += 1
                out_y = 0
                if out_x == out_size:
                    break
            # 池化操作
            out[i][out_x][out_y] = np.max(input[i, in_x:in_x + pooling_size, in_y:in_y + pooling_size])
            in_y += pooling_size
            out_y += 1
    return out


def show_formpath(img_path):
    img = plt.imread(img_path)
    img_max = np.max(img)
    img_min = np.min(img)
    img = img - img_min
    img = img / (img_max - img_min)
    img = img * 255
    plt.imshow(img, cmap='gray')
    plt.show()


def show_img(img):
    print(img)
    img_max = np.max(img)
    img_min = np.min(img)
    img = img - img_min
    img = img / (img_max - img_min)
    img = img * 255
    plt.imshow(img, cmap='gray')
    plt.show()


def main():
    img = plt.imread('../bdd.jpg')
    # plt.imshow(img, cmap='gray')
    # plt.show()
    # img = convolution(img, 3, 3, 3, 1)
    show_img(img)


if __name__ == '__main__':
    main()
